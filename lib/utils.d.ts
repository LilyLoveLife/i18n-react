import { NodePath } from "@babel/core";
import t, { FunctionDeclaration, ArrowFunctionExpression, FunctionExpression } from '@babel/types';
export declare const isTopFunction: (path: NodePath) => boolean;
export declare const getTopFunction: (path: NodePath) => NodePath<t.Node> | undefined;
export declare const isInFunction: (path: NodePath) => NodePath<t.Node> | null;
export declare const getTopPath: (path: NodePath) => NodePath<t.Program>;
export declare const getAllImport: (path: NodePath) => t.ImportDeclaration[];
export declare const check_insertImport_withoutHook: (path: NodePath) => void;
export declare type TFunctionType = ArrowFunctionExpression | FunctionExpression | FunctionDeclaration;
export declare const check_insertExposeHook: (path: NodePath) => void;
export declare const hasInsert_ExposeHook: (path: NodePath) => boolean | t.Statement | undefined;
export declare const hasImported_TFuncOfI18next: (path: NodePath) => boolean;
export declare const isReactFuncComp: (path: NodePath) => boolean | "" | undefined;
export declare const isCustomReactHookFunc: (path: NodePath) => boolean | "" | undefined;
export declare const isFunction: (path: NodePath) => boolean;
export declare const checkAndImport_TFuncOfI18next: (path: NodePath) => void;
export declare const writeFileIfNotExists: (directoryPath: string, fileName: string, content: string) => void;
